class e{constructor(){this.config=window.config,this.developerWallet=this.config.developerWallet,this.platformFeeRate=this.config.platformFee/100,this.artistRoyaltyRate=this.config.artistRoyalty/100,this.registrationFee=.01,this.init()}init(){console.log("üßÆ Calculation Verifier Initialized"),console.log("Developer Wallet:",this.developerWallet),console.log("Platform Fee Rate:",100*this.platformFeeRate+"%"),console.log("Artist Royalty Rate:",100*this.artistRoyaltyRate+"%"),console.log("Registration Fee:",this.registrationFee+" ETH"),this.verifyConfiguration()}verifyConfiguration(){const e=this.platformFeeRate+this.artistRoyaltyRate;return Math.abs(e-1)>1e-4?(console.error("‚ùå Fee Configuration Error: Platform fee + Artist royalty must equal 100%"),console.error("Current total:",(100*e).toFixed(2)+"%"),!1):this.developerWallet&&42===this.developerWallet.length?(console.log("‚úÖ Configuration Verified Successfully"),!0):(console.error("‚ùå Invalid Developer Wallet Address:",this.developerWallet),!1)}verifyNFTPurchase(e,t,r){const a=parseFloat(e),s=Number((a*this.artistRoyaltyRate).toFixed(6)),i=Number((a*this.platformFeeRate).toFixed(6)),o=Number((s+i).toFixed(6)),n={originalPrice:a,calculatedArtistAmount:s,calculatedPlatformFee:i,calculatedTotal:o,expectedArtistAmount:parseFloat(t),expectedPlatformFee:parseFloat(r),artistAmountMatch:Math.abs(s-parseFloat(t))<1e-6,platformFeeMatch:Math.abs(i-parseFloat(r))<1e-6,totalMatch:Math.abs(o-a)<1e-6,developerWallet:this.developerWallet};return n.isValid=n.artistAmountMatch&&n.platformFeeMatch&&n.totalMatch,n.isValid?console.log("‚úÖ NFT Purchase Calculation Verified:",n):console.error("‚ùå NFT Purchase Calculation Failed:",n),n}calculateNFTPurchase(e){const t=parseFloat(e);if(isNaN(t)||t<=0)return{success:!1,error:"Invalid NFT price"};const r=Number((t*this.artistRoyaltyRate).toFixed(6)),a=Number((t*this.platformFeeRate).toFixed(6)),s=Number((r+a).toFixed(6));return Math.abs(s-t)>1e-6?{success:!1,error:"Calculation precision error",details:{price:t,artistAmount:r,platformFee:a,total:s,difference:s-t}}:{success:!0,breakdown:{totalPrice:t,artistReceives:r,platformFee:a,artistPercentage:(100*this.artistRoyaltyRate).toFixed(1)+"%",platformPercentage:(100*this.platformFeeRate).toFixed(1)+"%",developerWallet:this.developerWallet,calculations:{artistCalculation:`${t} √ó ${this.artistRoyaltyRate} = ${r}`,platformCalculation:`${t} √ó ${this.platformFeeRate} = ${a}`,totalVerification:`${r} + ${a} = ${s}`}}}}verifyRegistrationFee(){const e={registrationFee:this.registrationFee,developerReceives:this.registrationFee,developerWallet:this.developerWallet,isValid:.01===this.registrationFee&&42===this.developerWallet.length};return e.isValid?console.log("‚úÖ Registration Fee Verified:",e):console.error("‚ùå Registration Fee Verification Failed:",e),e}generateReport(){const e={timestamp:(new Date).toISOString(),configuration:{developerWallet:this.developerWallet,platformFeeRate:this.platformFeeRate,artistRoyaltyRate:this.artistRoyaltyRate,registrationFee:this.registrationFee},verifications:{configurationValid:this.verifyConfiguration(),registrationFeeValid:this.verifyRegistrationFee().isValid},sampleCalculations:{nft_0_1_eth:this.calculateNFTPurchase(.1),nft_1_eth:this.calculateNFTPurchase(1),nft_5_eth:this.calculateNFTPurchase(5)}};return console.log("üìä Calculation Verification Report:",e),e}runTests(){console.log("üß™ Running Calculation Tests...");const e=[{price:.1,expectedArtist:.08,expectedPlatform:.02},{price:1,expectedArtist:.8,expectedPlatform:.2},{price:2.5,expectedArtist:2,expectedPlatform:.5},{price:10,expectedArtist:8,expectedPlatform:2}];let t=0;e.forEach((e,r)=>{const a=this.verifyNFTPurchase(e.price,e.expectedArtist,e.expectedPlatform);a.isValid?(t++,console.log(`‚úÖ Test ${r+1} PASSED: ${e.price} ETH`)):console.error(`‚ùå Test ${r+1} FAILED: ${e.price} ETH`,a)});const r={totalTests:e.length,passedTests:t,failedTests:e.length-t,successRate:(t/e.length*100).toFixed(1)+"%"};return console.log("üéØ Test Results:",r),r}}document.addEventListener("DOMContentLoaded",()=>{window.config&&(window.calculationVerifier=new e,window.config.debug&&setTimeout(()=>{window.calculationVerifier.runTests(),window.calculationVerifier.generateReport()},1e3))}),window.CalculationVerifier=e;window.blockchainService=new class{constructor(){this.web3=null,this.provider=null,this.chainId=null,this.config=window.config,this.developerWallet=this.config.developerWallet,this.contractAddress=this.config.contractAddress,this.networks=this.config.networks,this.platformFeePercent=this.config.platformFee,this.artistRoyaltyPercent=this.config.artistRoyalty,this.init()}async init(){if(window.ethereum){this.provider=window.ethereum;try{this.chainId=await this.provider.request({method:"eth_chainId"}),console.log("Connected to chain:",this.chainId)}catch(e){console.error("Failed to get chain ID:",e)}}}getCurrentNetwork(){switch(this.chainId){case"0x1":return this.networks.mainnet;case"0xaa36a7":return this.networks.sepolia;default:return{chainId:this.chainId,name:"Unknown Network"}}}async switchToSepolia(){try{return await this.provider.request({method:"wallet_switchEthereumChain",params:[{chainId:this.networks.sepolia.chainId}]}),this.chainId=this.networks.sepolia.chainId,!0}catch(e){if(4902!==e.code)return console.error("Failed to switch to Sepolia:",e),!1;try{return await this.provider.request({method:"wallet_addEthereumChain",params:[{chainId:this.networks.sepolia.chainId,chainName:this.networks.sepolia.name,nativeCurrency:{name:"SepoliaETH",symbol:"ETH",decimals:18},rpcUrls:[this.networks.sepolia.rpcUrl],blockExplorerUrls:["https://sepolia.etherscan.io"]}]}),this.chainId=this.networks.sepolia.chainId,!0}catch(t){return console.error("Failed to add Sepolia network:",t),!1}}}toWei(e){return(parseFloat(e)*Math.pow(10,18)).toString()}fromWei(e){return(parseFloat(e)/Math.pow(10,18)).toString()}async getBalance(e){try{const t=await this.provider.request({method:"eth_getBalance",params:[e,"latest"]});return this.fromWei(t)}catch(t){return console.error("Failed to get balance:",t),"0"}}async sendTransaction(e,t,r,a="0x"){try{const s=await this.provider.request({method:"eth_gasPrice"}),i=await this.provider.request({method:"eth_estimateGas",params:[{from:e,to:t,value:this.toWei(r),data:a}]}),o={from:e,to:t,value:this.toWei(r),gasPrice:s,gasLimit:i,data:a};return{success:!0,transactionHash:await this.provider.request({method:"eth_sendTransaction",params:[o]}),transaction:o}}catch(s){return console.error("Transaction failed:",s),{success:!1,error:s.message}}}async payRegistrationFee(e){const t="0.01",r=await this.getBalance(e);if(parseFloat(r)<parseFloat(t))return{success:!1,error:"Insufficient balance for registration fee"};const a=await this.sendTransaction(e,this.developerWallet,t);return a.success?{success:!0,transactionHash:a.transactionHash,amount:t,message:"Registration fee paid successfully"}:{success:!1,error:a.error||"Registration fee payment failed"}}async purchaseNFT(e,t,r){const a=this.platformFeePercent/100,s=this.artistRoyaltyPercent/100,i=parseFloat(t),o=Number((i*a).toFixed(6)),n=Number((i*s).toFixed(6)),c=Number((o+n).toFixed(6));if(Math.abs(c-i)>1e-6)return console.error("Fee calculation mismatch:",{price:i,developerFee:o,artistEarnings:n,totalCalculated:c}),{success:!1,error:"Fee calculation error - please try again"};const l=await this.getBalance(e);if(parseFloat(l)<i)return{success:!1,error:`Insufficient balance. Required: ${i} ETH, Available: ${parseFloat(l).toFixed(4)} ETH`};console.log("NFT Purchase Breakdown:",{totalPrice:i,artistEarnings:n,developerFee:o,artistAddress:r,developerAddress:this.developerWallet});try{const t=await this.sendTransaction(e,r,n.toString());if(!t.success)return{success:!1,error:"Failed to send payment to artist: "+t.error};const a=await this.sendTransaction(e,this.developerWallet,o.toString());return a.success?(console.log("NFT Purchase Successful:",{artistTx:t.transactionHash,developerTx:a.transactionHash,artistReceived:n,developerReceived:o}),{success:!0,artistTransaction:t.transactionHash,developerTransaction:a.transactionHash,breakdown:{total:i,artistReceives:n,platformFee:o,artistPercentage:"80%",platformPercentage:"20%",artistAddress:r,developerAddress:this.developerWallet}}):{success:!1,error:"Failed to send developer fee: "+a.error}}catch(h){return console.error("NFT purchase failed:",h),{success:!1,error:h.message||"Transaction failed"}}}async waitForTransaction(e,t=6e4){const r=Date.now();for(;Date.now()-r<t;)try{const t=await this.provider.request({method:"eth_getTransactionReceipt",params:[e]});if(t)return{success:!0,receipt:t,confirmed:"0x1"===t.status};await new Promise(e=>setTimeout(e,2e3))}catch(a){console.error("Error checking transaction:",a)}return{success:!1,error:"Transaction confirmation timeout"}}async getTransactionDetails(e){try{const t=await this.provider.request({method:"eth_getTransactionByHash",params:[e]});return{success:!0,transaction:t,receipt:await this.provider.request({method:"eth_getTransactionReceipt",params:[e]})}}catch(t){return console.error("Failed to get transaction details:",t),{success:!1,error:t.message}}}getExplorerUrl(e){switch(this.getCurrentNetwork().chainId){case"0x1":return`https://etherscan.io/tx/${e}`;case"0xaa36a7":return`https://sepolia.etherscan.io/tx/${e}`;default:return null}}};
