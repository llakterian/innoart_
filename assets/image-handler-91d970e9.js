window.imageHandler=new class{constructor(){this.maxFileSize=5242880,this.allowedTypes=["image/jpeg","image/png","image/gif","image/webp"],this.storageKey="innoart_images",this.ipfsApiKey="378ec52e.244f1311cc574f1d90b8210688e4e0e7",this.nftStorageApiKey="e55be093.0cbe7858183d4d21a74c4581fac99941",this.ipfsGateway="https://ipfs.io/ipfs/",this.ipfsGatewayBackup="https://gateway.pinata.cloud/ipfs/",this.init()}init(){localStorage.getItem(this.storageKey)||localStorage.setItem(this.storageKey,JSON.stringify({}))}validateFile(e){const a=[];return e?(this.allowedTypes.includes(e.type)||a.push("Invalid file type. Please select a JPEG, PNG, GIF, or WebP image."),e.size>this.maxFileSize&&a.push(`File size must be less than ${this.maxFileSize/1024/1024}MB`),a):(a.push("No file selected"),a)}async processImage(e,a=null){const t=this.validateFile(e);if(t.length>0)throw new Error(t.join(", "));try{const t=await this.fileToBase64(e),n=a||Date.now().toString(),r={id:n,name:e.name,size:e.size,type:e.type,data:t,uploadedAt:Date.now()};return this.saveImage(n,r),{success:!0,imageId:n,url:t,metadata:{name:e.name,size:e.size,type:e.type}}}catch(n){throw new Error("Failed to process image: "+n.message)}}fileToBase64(e){return new Promise((a,t)=>{const n=new FileReader;n.onload=()=>a(n.result),n.onerror=e=>t(e),n.readAsDataURL(e)})}saveImage(e,a){const t=this.getImages();t[e]=a,localStorage.setItem(this.storageKey,JSON.stringify(t))}getImages(){return JSON.parse(localStorage.getItem(this.storageKey)||"{}")}getImage(e){return this.getImages()[e]||null}deleteImage(e){const a=this.getImages();delete a[e],localStorage.setItem(this.storageKey,JSON.stringify(a))}createUploadComponent(e,a={}){const t=document.getElementById(e);if(!t)throw new Error(`Container with ID '${e}' not found`);const{multiple:n=!1,preview:r=!0,dragDrop:i=!0,maxFiles:o=1,onUpload:s=null,onError:l=null}=a,d=`\n            <div class="image-upload-component">\n                <div class="upload-area ${i?"drag-drop":""}" id="uploadArea_${e}">\n                    <div class="upload-content">\n                        <div class="upload-icon">üìÅ</div>\n                        <div class="upload-text">\n                            <p>Click to select ${n?"images":"an image"}</p>\n                            ${i?"<p>or drag and drop here</p>":""}\n                        </div>\n                        <div class="upload-formats">\n                            <small>Supported formats: JPEG, PNG, GIF, WebP (max ${this.maxFileSize/1024/1024}MB)</small>\n                        </div>\n                    </div>\n                    <input type="file" id="fileInput_${e}" \n                           accept="${this.allowedTypes.join(",")}" \n                           ${n?"multiple":""} \n                           style="display: none;">\n                </div>\n                ${r?'<div class="image-preview" id="preview_'+e+'"></div>':""}\n            </div>\n        `;t.innerHTML=d,this.setupUploadEvents(e,a),this.addUploadStyles()}setupUploadEvents(e,a){const t=document.getElementById(`uploadArea_${e}`),n=document.getElementById(`fileInput_${e}`);document.getElementById(`preview_${e}`),t.addEventListener("click",()=>{n.click()}),n.addEventListener("change",async t=>{await this.handleFileSelection(t.target.files,e,a)}),!1!==a.dragDrop&&(t.addEventListener("dragover",e=>{e.preventDefault(),t.classList.add("drag-over")}),t.addEventListener("dragleave",()=>{t.classList.remove("drag-over")}),t.addEventListener("drop",async n=>{n.preventDefault(),t.classList.remove("drag-over"),await this.handleFileSelection(n.dataTransfer.files,e,a)}))}async handleFileSelection(e,a,t){const{onUpload:n,onError:r,preview:i=!0}=t,o=document.getElementById(`preview_${a}`);try{const a=[];for(let t=0;t<e.length;t++){const n=e[t],r=await this.processImage(n);a.push(r),i&&o&&this.addImagePreview(o,r)}n&&n(a)}catch(s){console.error("Upload error:",s),r?r(s.message):alert("Error: "+s.message)}}addImagePreview(e,a){const t=document.createElement("div");t.className="image-preview-item",t.innerHTML=`\n            <img src="${a.url}" alt="${a.metadata.name}">\n            <div class="image-info">\n                <span class="image-name">${a.metadata.name}</span>\n                <span class="image-size">${this.formatFileSize(a.metadata.size)}</span>\n            </div>\n            <button class="remove-image" onclick="imageHandler.removePreview('${a.imageId}', this)">‚úï</button>\n        `,e.appendChild(t)}removePreview(e,a){const t=a.closest(".image-preview-item");t&&t.remove(),this.deleteImage(e)}formatFileSize(e){if(0===e)return"0 Bytes";const a=Math.floor(Math.log(e)/Math.log(1024));return parseFloat((e/Math.pow(1024,a)).toFixed(2))+" "+["Bytes","KB","MB","GB"][a]}addUploadStyles(){if(document.getElementById("image-upload-styles"))return;const e=document.createElement("style");e.id="image-upload-styles",e.textContent="\n            .image-upload-component {\n                width: 100%;\n                margin: 1rem 0;\n            }\n            \n            .upload-area {\n                border: 2px dashed var(--border-color);\n                border-radius: 8px;\n                padding: 2rem;\n                text-align: center;\n                cursor: pointer;\n                transition: all 0.3s ease;\n                background: var(--background-light);\n            }\n            \n            .upload-area:hover {\n                border-color: var(--primary-color);\n                background: rgba(99, 102, 241, 0.1);\n            }\n            \n            .upload-area.drag-over {\n                border-color: var(--primary-color);\n                background: rgba(99, 102, 241, 0.2);\n            }\n            \n            .upload-icon {\n                font-size: 3rem;\n                margin-bottom: 1rem;\n            }\n            \n            .upload-text p {\n                margin: 0.5rem 0;\n                color: var(--text-light);\n            }\n            \n            .upload-formats small {\n                color: var(--text-dark);\n            }\n            \n            .image-preview {\n                margin-top: 1rem;\n                display: grid;\n                grid-template-columns: repeat(auto-fill, minmax(150px, 1fr));\n                gap: 1rem;\n            }\n            \n            .image-preview-item {\n                position: relative;\n                background: var(--card-background);\n                border-radius: 8px;\n                overflow: hidden;\n                border: 1px solid var(--border-color);\n            }\n            \n            .image-preview-item img {\n                width: 100%;\n                height: 120px;\n                object-fit: cover;\n            }\n            \n            .image-info {\n                padding: 0.5rem;\n                display: flex;\n                flex-direction: column;\n                gap: 0.25rem;\n            }\n            \n            .image-name {\n                font-size: 0.9rem;\n                color: var(--text-light);\n                font-weight: 500;\n                white-space: nowrap;\n                overflow: hidden;\n                text-overflow: ellipsis;\n            }\n            \n            .image-size {\n                font-size: 0.8rem;\n                color: var(--text-dark);\n            }\n            \n            .remove-image {\n                position: absolute;\n                top: 5px;\n                right: 5px;\n                background: var(--error-color);\n                color: white;\n                border: none;\n                border-radius: 50%;\n                width: 20px;\n                height: 20px;\n                font-size: 0.8rem;\n                cursor: pointer;\n                display: flex;\n                align-items: center;\n                justify-content: center;\n            }\n            \n            .remove-image:hover {\n                background: #dc2626;\n            }\n        ",document.head.appendChild(e)}async uploadToIPFS(e){try{const a=new FormData;a.append("file",e);const t=await fetch("https://api.nft.storage/upload",{method:"POST",headers:{Authorization:`Bearer ${this.nftStorageApiKey}`},body:a});if(!t.ok)throw new Error(`IPFS upload failed: ${t.statusText}`);const n=await t.json();return{success:!0,ipfsHash:n.value.cid,ipfsUrl:`${this.ipfsGateway}${n.value.cid}`,backupUrl:`${this.ipfsGatewayBackup}${n.value.cid}`}}catch(a){return console.error("IPFS upload error:",a),{success:!1,error:a.message}}}async handleImageUploadWithIPFS(e,a=!1){const t=this.validateFile(e);if(t.length>0)return{success:!1,errors:t};try{if(a){const a=await this.uploadToIPFS(e);if(a.success){const t=Date.now().toString(),n={id:t,name:e.name,type:e.type,size:e.size,ipfsHash:a.ipfsHash,ipfsUrl:a.ipfsUrl,backupUrl:a.backupUrl,uploadedAt:Date.now(),storage:"ipfs"};return this.storeImage(t,n),{success:!0,imageId:t,imageUrl:a.ipfsUrl,backupUrl:a.backupUrl,storage:"ipfs"}}console.warn("IPFS upload failed, falling back to local storage")}return await this.handleImageUpload(e)}catch(n){return console.error("Image upload error:",n),{success:!1,error:n.message}}}};
