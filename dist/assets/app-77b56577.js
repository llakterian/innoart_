!function(){const t=document.createElement("link").relList;if(!(t&&t.supports&&t.supports("modulepreload"))){for(const t of document.querySelectorAll('link[rel="modulepreload"]'))e(t);new MutationObserver(t=>{for(const n of t)if("childList"===n.type)for(const t of n.addedNodes)"LINK"===t.tagName&&"modulepreload"===t.rel&&e(t)}).observe(document,{childList:!0,subtree:!0})}function e(t){if(t.ep)return;t.ep=!0;const e=function(t){const e={};return t.integrity&&(e.integrity=t.integrity),t.referrerPolicy&&(e.referrerPolicy=t.referrerPolicy),"use-credentials"===t.crossOrigin?e.credentials="include":"anonymous"===t.crossOrigin?e.credentials="omit":e.credentials="same-origin",e}(t);fetch(t.href,e)}}();window.authManager=new class{constructor(){this.sessionKey="innoart_session",this.state={isAuthenticated:!1,walletAddress:null,token:null},this.channel=new BroadcastChannel("auth"),this.init()}init(){this.loadSession(),this.setupEventListeners()}loadSession(){const t=JSON.parse(localStorage.getItem(this.sessionKey));t&&t.token&&t.walletAddress&&(this.state.isAuthenticated=!0,this.state.walletAddress=t.walletAddress,this.state.token=t.token)}saveSession(){localStorage.setItem(this.sessionKey,JSON.stringify(this.state))}clearSession(){localStorage.removeItem(this.sessionKey),this.state.isAuthenticated=!1,this.state.walletAddress=null,this.state.token=null}async login(){if(void 0===window.ethereum)throw new Error("MetaMask not installed");const t=(await window.ethereum.request({method:"eth_requestAccounts"}))[0],e=`simulated_jwt_${t}_${Date.now()}`;this.state.isAuthenticated=!0,this.state.walletAddress=t,this.state.token=e,this.saveSession(),this.channel.postMessage({type:"login",...this.state})}logout(){this.clearSession(),this.channel.postMessage({type:"logout"})}getAuthState(){return this.state}setupEventListeners(){void 0!==window.ethereum&&window.ethereum.on("accountsChanged",t=>{0===t.length?this.logout():t[0]!==this.state.walletAddress&&(this.logout(),this.login())})}};window.apiClient=new class{constructor(){this.baseUrl="http://localhost:3000/api"}async _fetch(t,e={}){const{authManager:n}=window,{token:s}=n.getAuthState(),i={"Content-Type":"application/json",...e.headers};s&&(i.Authorization=`Bearer ${s}`);const a=await fetch(`${this.baseUrl}${t}`,{...e,headers:i});if(!a.ok){const t=await a.json();throw new Error(t.message||"API request failed")}return a.json()}async getProfile(t){return this._fetch(`/users/${t}`)}async updateProfile(t,e){return this._fetch(`/users/${t}`,{method:"PUT",body:JSON.stringify(e)})}async registerArtist(t){return this._fetch("/artists",{method:"POST",body:JSON.stringify(t)})}async createNFT(t){return this._fetch("/nfts",{method:"POST",body:JSON.stringify(t)})}async getNFTs(){return this._fetch("/nfts")}async purchaseNFT(t){return this._fetch(`/nfts/${t}/purchase`,{method:"POST"})}async getTransactions(t){return this._fetch(`/transactions/${t}`)}};window.uiManager=new class{constructor(){this.init()}init(){}sanitize(t){const e=document.createElement("div");return e.innerText=t,e.innerHTML}renderWalletState(t,e=null){document.querySelectorAll("[data-wallet-connect]").forEach(n=>{switch(n.classList.remove("btn-connecting","btn-connected"),t){case"connecting":n.textContent="Connecting...",n.disabled=!0,n.classList.add("btn-connecting");break;case"connected":const t=`${e.slice(0,6)}...${e.slice(-4)}`;n.textContent=this.sanitize(t),n.title=`Connected: ${this.sanitize(e)}`,n.disabled=!1,n.classList.add("btn-connected");break;case"disconnected":n.textContent="Connect Wallet",n.title="Click to connect your wallet",n.disabled=!1}})}showNotification(t,e="info",n=5e3){const s=document.createElement("div");s.className=`notification notification-${e}`,s.textContent=this.sanitize(t),document.body.appendChild(s),setTimeout(()=>{s.remove()},n)}showModal(t,e){const n=document.createElement("div");n.className="modal",n.innerHTML=`\n            <div class="modal-overlay">\n                <div class="modal-content">\n                    <div class="modal-header">\n                        <h2>${this.sanitize(t)}</h2>\n                        <button class="modal-close">&times;</button>\n                    </div>\n                    <div class="modal-body">\n                        ${e}\n                    </div>\n                </div>\n            </div>\n        `,document.body.appendChild(n),n.querySelector(".modal-close").addEventListener("click",()=>{n.remove()}),n.querySelector(".modal-overlay").addEventListener("click",t=>{t.target===t.currentTarget&&n.remove()})}};class t{constructor(){this.authManager=window.authManager,this.apiClient=window.apiClient,this.uiManager=window.uiManager,this.transactionService=window.transactionService,this.nftService=window.nftService,this.artistService=window.artistService,this.userService=window.userService,this.init()}async init(){this.setupEventListeners(),this.authManager.loadSession(),this.updateWalletUI(),this.listenForAuthChanges()}setupEventListeners(){document.addEventListener("click",async t=>{if(t.target.closest("[data-wallet-connect]"))if(t.preventDefault(),this.authManager.getAuthState().isAuthenticated)this.authManager.logout(),this.updateWalletUI();else{this.uiManager.renderWalletState("connecting");try{await this.authManager.login()}catch(e){this.uiManager.showNotification(e.message,"error")}finally{this.updateWalletUI()}}})}updateWalletUI(){const t=this.authManager.getAuthState();t.isAuthenticated?this.uiManager.renderWalletState("connected",t.walletAddress):this.uiManager.renderWalletState("disconnected")}listenForAuthChanges(){this.authManager.channel.onmessage=t=>{"login"!==t.data.type&&"logout"!==t.data.type||(this.updateWalletUI(),window.location.reload())}}}document.addEventListener("DOMContentLoaded",()=>{new t});
