window.blockchainService=new class{constructor(){this.web3=null,this.provider=null,this.chainId=null,this.config=window.config,this.developerWallet=this.config.developerWallet,this.contractAddress=this.config.contractAddress,this.networks=this.config.networks,this.platformFeePercent=this.config.platformFee,this.artistRoyaltyPercent=this.config.artistRoyalty,this.init()}async init(){if(window.ethereum){this.provider=window.ethereum;try{this.chainId=await this.provider.request({method:"eth_chainId"}),console.log("Connected to chain:",this.chainId)}catch(e){console.error("Failed to get chain ID:",e)}}}getCurrentNetwork(){switch(this.chainId){case"0x1":return this.networks.mainnet;case"0xaa36a7":return this.networks.sepolia;default:return{chainId:this.chainId,name:"Unknown Network"}}}async switchToSepolia(){try{return await this.provider.request({method:"wallet_switchEthereumChain",params:[{chainId:this.networks.sepolia.chainId}]}),this.chainId=this.networks.sepolia.chainId,!0}catch(e){if(4902!==e.code)return console.error("Failed to switch to Sepolia:",e),!1;try{return await this.provider.request({method:"wallet_addEthereumChain",params:[{chainId:this.networks.sepolia.chainId,chainName:this.networks.sepolia.name,nativeCurrency:{name:"SepoliaETH",symbol:"ETH",decimals:18},rpcUrls:[this.networks.sepolia.rpcUrl],blockExplorerUrls:["https://sepolia.etherscan.io"]}]}),this.chainId=this.networks.sepolia.chainId,!0}catch(t){return console.error("Failed to add Sepolia network:",t),!1}}}toWei(e){return(parseFloat(e)*Math.pow(10,18)).toString()}fromWei(e){return(parseFloat(e)/Math.pow(10,18)).toString()}async getBalance(e){try{const t=await this.provider.request({method:"eth_getBalance",params:[e,"latest"]});return this.fromWei(t)}catch(t){return console.error("Failed to get balance:",t),"0"}}async sendTransaction(e,t,r,a="0x"){try{const s=await this.provider.request({method:"eth_gasPrice"}),i=await this.provider.request({method:"eth_estimateGas",params:[{from:e,to:t,value:this.toWei(r),data:a}]}),n={from:e,to:t,value:this.toWei(r),gasPrice:s,gasLimit:i,data:a};return{success:!0,transactionHash:await this.provider.request({method:"eth_sendTransaction",params:[n]}),transaction:n}}catch(s){return console.error("Transaction failed:",s),{success:!1,error:s.message}}}async payRegistrationFee(e){const t="0.01",r=await this.getBalance(e);if(parseFloat(r)<parseFloat(t))return{success:!1,error:"Insufficient balance for registration fee"};const a=await this.sendTransaction(e,this.developerWallet,t);return a.success?{success:!0,transactionHash:a.transactionHash,amount:t,message:"Registration fee paid successfully"}:{success:!1,error:a.error||"Registration fee payment failed"}}async purchaseNFT(e,t,r){const a=this.platformFeePercent/100,s=this.artistRoyaltyPercent/100,i=parseFloat(t),n=i*a,o=i*s,c=await this.getBalance(e);if(parseFloat(c)<i)return{success:!1,error:"Insufficient balance for NFT purchase"};try{const t=await this.sendTransaction(e,r,o.toString());if(!t.success)return{success:!1,error:"Failed to send payment to artist"};const a=await this.sendTransaction(e,this.developerWallet,n.toString());return a.success?{success:!0,artistTransaction:t.transactionHash,developerTransaction:a.transactionHash,breakdown:{total:i,artistReceives:o,platformFee:n,artistPercentage:"80%",platformPercentage:"20%"}}:{success:!1,error:"Failed to send developer fee"}}catch(h){return console.error("NFT purchase failed:",h),{success:!1,error:h.message}}}async waitForTransaction(e,t=6e4){const r=Date.now();for(;Date.now()-r<t;)try{const t=await this.provider.request({method:"eth_getTransactionReceipt",params:[e]});if(t)return{success:!0,receipt:t,confirmed:"0x1"===t.status};await new Promise(e=>setTimeout(e,2e3))}catch(a){console.error("Error checking transaction:",a)}return{success:!1,error:"Transaction confirmation timeout"}}async getTransactionDetails(e){try{const t=await this.provider.request({method:"eth_getTransactionByHash",params:[e]});return{success:!0,transaction:t,receipt:await this.provider.request({method:"eth_getTransactionReceipt",params:[e]})}}catch(t){return console.error("Failed to get transaction details:",t),{success:!1,error:t.message}}}getExplorerUrl(e){switch(this.getCurrentNetwork().chainId){case"0x1":return`https://etherscan.io/tx/${e}`;case"0xaa36a7":return`https://sepolia.etherscan.io/tx/${e}`;default:return null}}};
