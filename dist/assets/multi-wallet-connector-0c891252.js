!function(){const e=document.createElement("link").relList;if(!(e&&e.supports&&e.supports("modulepreload"))){for(const e of document.querySelectorAll('link[rel="modulepreload"]'))t(e);new MutationObserver(e=>{for(const n of e)if("childList"===n.type)for(const e of n.addedNodes)"LINK"===e.tagName&&"modulepreload"===e.rel&&t(e)}).observe(document,{childList:!0,subtree:!0})}function t(e){if(e.ep)return;e.ep=!0;const t=function(e){const t={};return e.integrity&&(t.integrity=e.integrity),e.referrerPolicy&&(t.referrerPolicy=e.referrerPolicy),"use-credentials"===e.crossOrigin?t.credentials="include":"anonymous"===e.crossOrigin?t.credentials="omit":t.credentials="same-origin",t}(e);fetch(e.href,t)}}();window.config=new class{constructor(){this.networkId=11155111,this.networkName="sepolia",this.chainId=11155111,this.alchemyApiKey="rcicHE-JjgwQXK8SeyoRH3SOOkOLkZhx",this.alchemyUrl="https://eth-sepolia.g.alchemy.com/v2/rcicHE-JjgwQXK8SeyoRH3SOOkOLkZhx",this.contractAddress="0xca96FFD000Ce3d041C905d4d76d5781E35D75B3A",this.developerWallet="0x426F1B6F42F4fAa8cDc96D0C2a82e70709F3a191",this.ipfsApiKey="378ec52e.244f1311cc574f1d90b8210688e4e0e7",this.nftStorageApiKey="e55be093.0cbe7858183d4d21a74c4581fac99941",this.ipfsGateway="https://ipfs.io/ipfs/",this.ipfsGatewayBackup="https://gateway.pinata.cloud/ipfs/",this.platformFee=20,this.artistRoyalty=80,this.marketplaceName="InnoArt",this.walletConnectProjectId="77be79148051cada8506f6f586a028dd",this.nodeEnv="development",this.debug=!0,this.enableAnalytics=!1,this.sentryDsn="",this.networks={sepolia:{chainId:"0xaa36a7",name:"Sepolia Testnet",rpcUrl:this.alchemyUrl,blockExplorer:"https://sepolia.etherscan.io",nativeCurrency:{name:"SepoliaETH",symbol:"ETH",decimals:18}},mainnet:{chainId:"0x1",name:"Ethereum Mainnet",rpcUrl:"https://eth-mainnet.g.alchemy.com/v2/your_alchemy_key",blockExplorer:"https://etherscan.io",nativeCurrency:{name:"Ethereum",symbol:"ETH",decimals:18}}}}getCurrentNetwork(){return this.networks[this.networkName]}getPlatformFeeRate(){return this.platformFee/100}getArtistRoyaltyRate(){return this.artistRoyalty/100}getTransactionUrl(e){return`${this.getCurrentNetwork().blockExplorer}/tx/${e}`}getAddressUrl(e){return`${this.getCurrentNetwork().blockExplorer}/address/${e}`}getIpfsUrl(e){return`${this.ipfsGateway}${e}`}getIpfsBackupUrl(e){return`${this.ipfsGatewayBackup}${e}`}isValid(){return["contractAddress","developerWallet","alchemyApiKey","nftStorageApiKey"].every(e=>this[e]&&this[e].length>0)}getSummary(){return{network:this.networkName,chainId:this.chainId,contract:this.contractAddress,developer:this.developerWallet,platformFee:`${this.platformFee}%`,artistRoyalty:`${this.artistRoyalty}%`,marketplace:this.marketplaceName,environment:this.nodeEnv}}},window.config.debug&&console.log("InnArt Configuration:",window.config.getSummary());const e=new class{constructor(){this.supportedWallets={metamask:{name:"MetaMask",icon:"🦊",provider:"ethereum",downloadUrl:"https://metamask.io/download/",mobile:!0},walletconnect:{name:"WalletConnect",icon:"🔗",provider:"walletconnect",downloadUrl:"https://walletconnect.com/",mobile:!0},coinbase:{name:"Coinbase Wallet",icon:"🔵",provider:"coinbaseWallet",downloadUrl:"https://www.coinbase.com/wallet",mobile:!0},trust:{name:"Trust Wallet",icon:"🛡️",provider:"trustwallet",downloadUrl:"https://trustwallet.com/",mobile:!0},rainbow:{name:"Rainbow",icon:"🌈",provider:"rainbow",downloadUrl:"https://rainbow.me/",mobile:!0}},this.state={isConnected:!1,isConnecting:!1,walletAddress:null,walletType:null,chainId:null,provider:null},this.init()}async init(){console.log("🔗 Initializing Multi-Wallet Connector..."),await this.checkExistingConnections(),this.setupEventListeners(),this.updateUI(),console.log("✅ Multi-Wallet Connector initialized")}async checkExistingConnections(){if(void 0!==window.ethereum)try{const e=await window.ethereum.request({method:"eth_accounts"});e.length>0&&(this.state.isConnected=!0,this.state.walletAddress=e[0],this.state.walletType="metamask",this.state.provider=window.ethereum,this.state.chainId=await window.ethereum.request({method:"eth_chainId"}),console.log("🦊 Existing MetaMask connection found:",e[0]),this.setupProviderListeners())}catch(t){console.log("No existing MetaMask connection")}const e=localStorage.getItem("wallet_connection");if(e&&!this.state.isConnected)try{const t=JSON.parse(e);t.address&&t.type&&await this.reconnectWallet(t.type)}catch(t){console.log("Failed to restore saved connection:",t),localStorage.removeItem("wallet_connection")}}async reconnectWallet(e){try{if("metamask"===e){if(void 0!==window.ethereum){const e=await window.ethereum.request({method:"eth_accounts"});e.length>0&&await this.handleConnection("metamask",window.ethereum,e[0])}}else console.log("Reconnection not implemented for:",e)}catch(t){console.error("Reconnection failed:",t)}}setupEventListeners(){document.addEventListener("click",e=>{const t=e.target;this.isWalletButton(t)&&(e.preventDefault(),e.stopPropagation(),this.state.isConnected?this.showDisconnectModal():this.showWalletModal())})}setupProviderListeners(){this.state.provider&&"metamask"===this.state.walletType&&(this.state.provider.on("accountsChanged",e=>{console.log("Accounts changed:",e),0===e.length?this.disconnect():(this.state.walletAddress=e[0],this.saveConnection(),this.updateUI(),this.showMessage("Account switched successfully","success"))}),this.state.provider.on("chainChanged",e=>{console.log("Chain changed:",e),this.state.chainId=e,this.updateUI()}),this.state.provider.on("disconnect",e=>{console.log("Provider disconnected:",e),this.disconnect()}))}isWalletButton(e){return"connectWallet"===e.id||"connectWalletBtn"===e.id||"registerConnectBtn"===e.id||e.classList.contains("connect-wallet-btn")||e.hasAttribute("data-wallet-connect")}showWalletModal(){const e=document.createElement("div");e.className="wallet-modal-overlay",e.innerHTML=`\n            <div class="wallet-modal">\n                <div class="wallet-modal-header">\n                    <h3>Connect Your Wallet</h3>\n                    <button class="close-btn" onclick="this.parentElement.parentElement.parentElement.remove()">&times;</button>\n                </div>\n                <div class="wallet-modal-content">\n                    <p class="wallet-modal-description">\n                        Choose your preferred wallet to connect to InnArt. All Ethereum-compatible wallets are supported.\n                    </p>\n                    <div class="wallet-options">\n                        ${this.generateWalletOptions()}\n                    </div>\n                    <div class="wallet-modal-footer">\n                        <p class="wallet-help">\n                            Don't have a wallet? <a href="https://ethereum.org/en/wallets/" target="_blank">Learn more</a>\n                        </p>\n                    </div>\n                </div>\n            </div>\n        `,document.body.appendChild(e),this.addWalletModalStyles(),e.querySelectorAll(".wallet-option").forEach(t=>{t.addEventListener("click",()=>{const n=t.dataset.wallet;e.remove(),this.connectWallet(n)})})}generateWalletOptions(){return Object.entries(this.supportedWallets).map(([e,t])=>{const n=this.isWalletAvailable(e),a=n?"Available":"Install";return`\n                <div class="wallet-option ${n?"available":"unavailable"}" data-wallet="${e}">\n                    <div class="wallet-icon">${t.icon}</div>\n                    <div class="wallet-info">\n                        <div class="wallet-name">${t.name}</div>\n                        <div class="wallet-status">${a}</div>\n                    </div>\n                    <div class="wallet-arrow">→</div>\n                </div>\n            `}).join("")}isWalletAvailable(e){switch(e){case"metamask":return void 0!==window.ethereum&&window.ethereum.isMetaMask;case"coinbase":return void 0!==window.ethereum&&window.ethereum.isCoinbaseWallet;case"trust":return void 0!==window.ethereum&&window.ethereum.isTrust;default:return void 0!==window.ethereum}}async connectWallet(e){if(this.state.isConnecting)this.showMessage("Connection already in progress","info");else{this.state.isConnecting=!0,this.updateUI();try{switch(e){case"metamask":await this.connectMetaMask();break;case"walletconnect":await this.connectWalletConnect();break;case"coinbase":await this.connectCoinbase();break;default:await this.connectGenericWallet(e)}}catch(t){console.error("Connection error:",t),this.handleConnectionError(t)}finally{this.state.isConnecting=!1,this.updateUI()}}}async connectMetaMask(){if(void 0===window.ethereum)throw new Error("MetaMask not installed");const e=await window.ethereum.request({method:"eth_requestAccounts"}),t=await window.ethereum.request({method:"eth_chainId"});await this.handleConnection("metamask",window.ethereum,e[0],t)}async connectWalletConnect(){await this.connectGenericWallet("walletconnect")}async connectCoinbase(){if(void 0===window.ethereum||!window.ethereum.isCoinbaseWallet)throw new Error("Coinbase Wallet not available");{const e=await window.ethereum.request({method:"eth_requestAccounts"}),t=await window.ethereum.request({method:"eth_chainId"});await this.handleConnection("coinbase",window.ethereum,e[0],t)}}async connectGenericWallet(e){if(void 0===window.ethereum){const t=this.supportedWallets[e];throw window.open(t.downloadUrl,"_blank"),new Error(`${t.name} not installed`)}const t=await window.ethereum.request({method:"eth_requestAccounts"}),n=await window.ethereum.request({method:"eth_chainId"});await this.handleConnection(e,window.ethereum,t[0],n)}async handleConnection(e,t,n,a){this.state.isConnected=!0,this.state.walletAddress=n,this.state.walletType=e,this.state.provider=t,this.state.chainId=a;try{const a=`Welcome to InnArt!\n\nSign this message to authenticate your wallet.\n\nTimestamp: ${(new Date).toISOString()}\nAddress: ${n}`,o=await t.request({method:"personal_sign",params:[a,n]});sessionStorage.setItem("wallet_signature",o),sessionStorage.setItem("wallet_address",n),sessionStorage.setItem("wallet_auth_timestamp",Date.now().toString()),this.showMessage(`${this.supportedWallets[e].name} connected and authenticated!`,"success")}catch(o){console.warn("Signature declined:",o),this.showMessage(`${this.supportedWallets[e].name} connected (authentication signature declined)`,"warning")}this.saveConnection(),this.setupProviderListeners(),this.updateUI(),window.dispatchEvent(new CustomEvent("walletConnected",{detail:{address:n,chainId:a,walletType:e,provider:e}}))}saveConnection(){const e={address:this.state.walletAddress,type:this.state.walletType,chainId:this.state.chainId,timestamp:Date.now()};localStorage.setItem("wallet_connection",JSON.stringify(e))}showDisconnectModal(){const e=document.createElement("div");e.className="wallet-modal-overlay",e.innerHTML=`\n            <div class="wallet-modal">\n                <div class="wallet-modal-header">\n                    <h3>Disconnect Wallet</h3>\n                    <button class="close-btn" onclick="this.parentElement.parentElement.parentElement.remove()">&times;</button>\n                </div>\n                <div class="wallet-modal-content">\n                    <div class="disconnect-info">\n                        <div class="wallet-icon">${this.supportedWallets[this.state.walletType].icon}</div>\n                        <div class="wallet-details">\n                            <div class="wallet-name">${this.supportedWallets[this.state.walletType].name}</div>\n                            <div class="wallet-address">${this.formatAddress(this.state.walletAddress)}</div>\n                        </div>\n                    </div>\n                    <p>Are you sure you want to disconnect your wallet?</p>\n                    <div class="disconnect-actions">\n                        <button class="btn btn-secondary" onclick="this.parentElement.parentElement.parentElement.parentElement.remove()">Cancel</button>\n                        <button class="btn btn-primary" onclick="multiWalletConnector.disconnect(); this.parentElement.parentElement.parentElement.parentElement.remove();">Disconnect</button>\n                    </div>\n                </div>\n            </div>\n        `,document.body.appendChild(e),this.addWalletModalStyles()}disconnect(){console.log("Disconnecting wallet..."),this.state.isConnected=!1,this.state.walletAddress=null,this.state.walletType=null,this.state.provider=null,this.state.chainId=null,localStorage.removeItem("wallet_connection"),sessionStorage.removeItem("wallet_signature"),sessionStorage.removeItem("wallet_address"),sessionStorage.removeItem("wallet_auth_timestamp"),this.updateUI(),this.showMessage("Wallet disconnected","success"),window.dispatchEvent(new CustomEvent("walletDisconnected"))}updateUI(){this.getAllWalletButtons().forEach(e=>{var t,n;if(e)try{if(e.classList.remove("btn-connected","btn-connecting"),this.state.isConnecting)e.textContent="Connecting...",e.disabled=!0,e.classList.add("btn-connecting"),e.title="Connecting to wallet...";else if(this.state.isConnected&&this.state.walletAddress){const a=(null==(t=this.supportedWallets[this.state.walletType])?void 0:t.icon)||"🔗",o=this.formatAddress(this.state.walletAddress);e.innerHTML=`${a} ${o}`,e.disabled=!1,e.classList.add("btn-connected"),e.title=`Connected with ${(null==(n=this.supportedWallets[this.state.walletType])?void 0:n.name)||"Wallet"}: ${this.state.walletAddress}\nClick to disconnect`}else e.textContent="Connect Wallet",e.disabled=!1,e.title="Click to connect your wallet"}catch(a){console.error("Error updating button:",a)}})}getAllWalletButtons(){const e=[];return["#connectWallet","#connectWalletBtn","#registerConnectBtn",".connect-wallet-btn","[data-wallet-connect]"].forEach(t=>{document.querySelectorAll(t).forEach(t=>e.push(t))}),e}handleConnectionError(e){let t="Failed to connect wallet";4001===e.code?t="Connection rejected by user":-32002===e.code?t="Connection request pending in wallet":e.message.includes("not installed")&&(t=e.message),this.showMessage(t,"error")}formatAddress(e){return e?`${e.substring(0,6)}...${e.substring(e.length-4)}`:""}showMessage(e,t="info",n=5e3){console.log(`[${t.toUpperCase()}] ${e}`);document.querySelectorAll(".wallet-message").forEach(e=>e.remove());const a=document.createElement("div");a.className=`wallet-message wallet-message-${t}`,a.textContent=e,Object.assign(a.style,{position:"fixed",top:"20px",right:"20px",padding:"12px 20px",borderRadius:"8px",fontWeight:"500",zIndex:"10001",maxWidth:"350px",wordWrap:"break-word",boxShadow:"0 4px 20px rgba(0, 0, 0, 0.3)",transition:"opacity 0.3s ease-in-out",opacity:"0"});const o={success:{background:"#10b981",color:"white"},error:{background:"#ef4444",color:"white"},warning:{background:"#f59e0b",color:"white"},info:{background:"#3b82f6",color:"white"}};Object.assign(a.style,o[t]||o.info),document.body.appendChild(a),setTimeout(()=>{a.style.opacity="1"},100),setTimeout(()=>{a.style.opacity="0",setTimeout(()=>{a.parentNode&&a.remove()},300)},n)}addWalletModalStyles(){if(document.getElementById("wallet-modal-styles"))return;const e=document.createElement("style");e.id="wallet-modal-styles",e.textContent="\n            .wallet-modal-overlay {\n                position: fixed;\n                top: 0;\n                left: 0;\n                width: 100%;\n                height: 100%;\n                background: rgba(0, 0, 0, 0.8);\n                display: flex;\n                align-items: center;\n                justify-content: center;\n                z-index: 10000;\n                animation: fadeIn 0.3s ease;\n            }\n            \n            .wallet-modal {\n                background: var(--card-background);\n                border: 1px solid var(--border-color);\n                border-radius: 20px;\n                width: 100%;\n                max-width: 480px;\n                margin: 1rem;\n                overflow: hidden;\n                box-shadow: 0 25px 50px rgba(0, 0, 0, 0.3);\n            }\n            \n            .wallet-modal-header {\n                display: flex;\n                justify-content: space-between;\n                align-items: center;\n                padding: 1.5rem;\n                border-bottom: 1px solid var(--border-color);\n                background: var(--background-light);\n            }\n            \n            .wallet-modal-header h3 {\n                margin: 0;\n                color: var(--text-light);\n                font-size: 1.3rem;\n                font-weight: 600;\n            }\n            \n            .close-btn {\n                background: none;\n                border: none;\n                font-size: 1.5rem;\n                cursor: pointer;\n                color: var(--text-dark);\n                padding: 0.5rem;\n                border-radius: 50%;\n                transition: all 0.3s ease;\n            }\n            \n            .close-btn:hover {\n                background: var(--border-color);\n                color: var(--text-light);\n            }\n            \n            .wallet-modal-content {\n                padding: 1.5rem;\n            }\n            \n            .wallet-modal-description {\n                color: var(--text-dark);\n                margin-bottom: 1.5rem;\n                text-align: center;\n                line-height: 1.5;\n            }\n            \n            .wallet-options {\n                display: flex;\n                flex-direction: column;\n                gap: 0.75rem;\n                margin-bottom: 1.5rem;\n            }\n            \n            .wallet-option {\n                display: flex;\n                align-items: center;\n                padding: 1rem;\n                border: 1px solid var(--border-color);\n                border-radius: 12px;\n                cursor: pointer;\n                transition: all 0.3s ease;\n                background: var(--background-light);\n            }\n            \n            .wallet-option:hover {\n                border-color: var(--primary-color);\n                background: rgba(99, 102, 241, 0.05);\n                transform: translateY(-2px);\n            }\n            \n            .wallet-option.unavailable {\n                opacity: 0.6;\n            }\n            \n            .wallet-icon {\n                font-size: 1.5rem;\n                margin-right: 1rem;\n                width: 24px;\n                text-align: center;\n            }\n            \n            .wallet-info {\n                flex: 1;\n            }\n            \n            .wallet-name {\n                font-weight: 600;\n                color: var(--text-light);\n                margin-bottom: 0.25rem;\n            }\n            \n            .wallet-status {\n                font-size: 0.8rem;\n                color: var(--text-dark);\n            }\n            \n            .wallet-arrow {\n                color: var(--text-dark);\n                font-size: 1.2rem;\n            }\n            \n            .wallet-modal-footer {\n                text-align: center;\n                padding-top: 1rem;\n                border-top: 1px solid var(--border-color);\n            }\n            \n            .wallet-help {\n                font-size: 0.9rem;\n                color: var(--text-dark);\n                margin: 0;\n            }\n            \n            .wallet-help a {\n                color: var(--primary-color);\n                text-decoration: none;\n            }\n            \n            .wallet-help a:hover {\n                text-decoration: underline;\n            }\n            \n            .disconnect-info {\n                display: flex;\n                align-items: center;\n                gap: 1rem;\n                margin-bottom: 1.5rem;\n                padding: 1rem;\n                background: var(--background-light);\n                border-radius: 12px;\n            }\n            \n            .disconnect-info .wallet-icon {\n                font-size: 2rem;\n                margin: 0;\n            }\n            \n            .wallet-details .wallet-name {\n                font-size: 1.1rem;\n                margin-bottom: 0.25rem;\n            }\n            \n            .wallet-address {\n                font-family: 'Courier New', monospace;\n                font-size: 0.9rem;\n                color: var(--text-dark);\n            }\n            \n            .disconnect-actions {\n                display: flex;\n                gap: 1rem;\n                justify-content: flex-end;\n                margin-top: 1.5rem;\n            }\n            \n            @keyframes fadeIn {\n                from { opacity: 0; }\n                to { opacity: 1; }\n            }\n            \n            @media (max-width: 768px) {\n                .wallet-modal {\n                    margin: 0.5rem;\n                    max-width: calc(100% - 1rem);\n                }\n                \n                .disconnect-actions {\n                    flex-direction: column;\n                }\n            }\n        ",document.head.appendChild(e)}getConnectionStatus(){return this.state.isConnected}getWalletAddress(){return this.state.walletAddress}getWalletType(){return this.state.walletType}getChainId(){return this.state.chainId}getProvider(){return this.state.provider}isConnecting(){return this.state.isConnecting}};window.multiWalletConnector=e,window.walletConnection=e,window.connectWallet=()=>e.showWalletModal(),window.disconnectWallet=()=>e.disconnect();
