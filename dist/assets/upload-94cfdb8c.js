import"./wallet-5154a2ff.js";class e{constructor(){this.walletConnection=window.walletConnection,this.init()}async init(){this.setupEventListeners(),await this.checkWalletConnection()}setupEventListeners(){document.addEventListener("click",e=>{"connectWallet"===e.target.id&&this.handleWalletConnection()});const e=document.getElementById("mobileMenuToggle"),t=document.getElementById("mobileMenu");e&&t&&(e.addEventListener("click",()=>{t.classList.toggle("active")}),document.addEventListener("click",n=>{e.contains(n.target)||t.contains(n.target)||t.classList.remove("active")}));const n=document.getElementById("artworkFile"),l=document.getElementById("uploadBtn"),o=document.getElementById("mintNFT");n&&n.addEventListener("change",e=>{this.handleFileSelect(e)}),l&&l.addEventListener("click",()=>{null==n||n.click()}),o&&o.addEventListener("click",()=>{this.handleMintNFT()})}async checkWalletConnection(){console.log("Upload: checkWalletConnection called"),window.walletState&&window.walletState.isConnected||this.showConnectWalletPrompt()}async handleWalletConnection(){if(console.log("Upload: handleWalletConnection called"),window.walletState&&window.walletState.isConnected)window.disconnectWalletDirect&&window.disconnectWalletDirect(),this.showConnectWalletPrompt();else if(window.connectWalletDirect)try{await window.connectWalletDirect(),window.walletState&&window.walletState.isConnected&&this.hideConnectWalletPrompt()}catch(e){console.error("Upload: Wallet connection failed",e)}else console.error("Upload: Direct wallet connection not available")}showConnectWalletPrompt(){const e=document.getElementById("uploadForm"),t=document.getElementById("connectWalletPrompt");e&&(e.style.display="none"),t&&(t.style.display="block")}hideConnectWalletPrompt(){const e=document.getElementById("uploadForm"),t=document.getElementById("connectWalletPrompt");e&&(e.style.display="block"),t&&(t.style.display="none")}handleFileSelect(e){const t=e.target.files[0];if(!t)return;const n=document.getElementById("previewImage"),l=document.querySelector(".upload-area");if(t.type.startsWith("image/")){const e=new FileReader;e.onload=e=>{n&&(n.src=e.target.result,n.style.display="block"),l&&l.classList.add("has-file")},e.readAsDataURL(t)}else this.walletConnection.showMessage("Please select an image file.","error")}async handleMintNFT(){var e,t,n;if(!this.walletConnection.getConnectionStatus())return void this.walletConnection.showMessage("Please connect your wallet first.","error");const l=this.walletConnection.getWalletAddress(),o=null==(e=document.getElementById("nftTitle"))?void 0:e.value,i=null==(t=document.getElementById("nftDescription"))?void 0:t.value,a=null==(n=document.getElementById("nftPrice"))?void 0:n.value,s=document.getElementById("artworkFile");if(!(o&&i&&a&&(null==s?void 0:s.files[0])))return void this.walletConnection.showMessage("Please fill in all fields and select an image.","error");if(!window.userStore.isArtistRegistered(l))return this.walletConnection.showMessage("You must be a registered artist to mint NFTs.","error"),void setTimeout(()=>{window.location.href="artist-register.html"},2e3);const c=document.getElementById("mintNFT"),d=null==c?void 0:c.textContent;c&&(c.textContent="Minting NFT...",c.disabled=!0);try{const e=await window.imageHandler.processImage(s.files[0]),t={name:o,description:i,price:a,creator:l,image:e.imageId,category:"art"};window.userStore.createNFT(t);setTimeout(()=>{this.walletConnection.showMessage(`NFT "${o}" minted successfully!`,"success"),this.resetForm(),c&&(c.textContent=d,c.disabled=!1),setTimeout(()=>{window.location.href="profile.html"},2e3)},2e3)}catch(r){console.error("Minting error:",r),this.walletConnection.showMessage("Failed to mint NFT: "+r.message,"error"),c&&(c.textContent=d,c.disabled=!1)}}resetForm(){const e=document.getElementById("uploadForm");e&&e.reset();const t=document.getElementById("previewImage"),n=document.querySelector(".upload-area");t&&(t.style.display="none",t.src=""),n&&n.classList.remove("has-file")}}document.addEventListener("DOMContentLoaded",()=>{new e});
