window.userStore=new class{constructor(){this.storageKey="innoart_user_data",this.transactionKey="innoart_transactions",this.artistsKey="innoart_artists",this.nftsKey="innoart_nfts",this.init()}init(){this.ensureStorageExists()}ensureStorageExists(){localStorage.getItem(this.storageKey)||localStorage.setItem(this.storageKey,JSON.stringify({})),localStorage.getItem(this.transactionKey)||localStorage.setItem(this.transactionKey,JSON.stringify([])),localStorage.getItem(this.artistsKey)||localStorage.setItem(this.artistsKey,JSON.stringify([])),localStorage.getItem(this.nftsKey)||localStorage.setItem(this.nftsKey,JSON.stringify([]))}saveUserProfile(t,e){const s=this.getUsersData();s[t]={...s[t],...e,lastUpdated:Date.now()},localStorage.setItem(this.storageKey,JSON.stringify(s))}getUserProfile(t){return this.getUsersData()[t]||null}getUsersData(){return JSON.parse(localStorage.getItem(this.storageKey)||"{}")}registerArtist(t,e){const s=this.getArtists(),a=s.find(e=>e.walletAddress===t);a?Object.assign(a,e,{lastUpdated:Date.now()}):s.push({id:Date.now().toString(),walletAddress:t,...e,registrationDate:Date.now(),verified:!1,totalSales:0,totalEarnings:"0"}),localStorage.setItem(this.artistsKey,JSON.stringify(s)),this.addTransaction({type:"artist_registration_fee",walletAddress:t,amount:"0.01",timestamp:Date.now(),status:"completed",description:"Artist registration fee (100% to developer)"}),this.addTransaction({type:"registration_fee_revenue",walletAddress:"developer_wallet",amount:"0.01",timestamp:Date.now(),status:"completed",description:"Registration fee revenue from artist registration"})}isArtistRegistered(t){return this.getArtists().some(e=>e.walletAddress===t)}getArtists(){return JSON.parse(localStorage.getItem(this.artistsKey)||"[]")}getArtist(t){return this.getArtists().find(e=>e.walletAddress===t)}createNFT(t){const e=this.getNFTs(),s={id:Date.now().toString(),...t,createdAt:Date.now(),forSale:!0,sold:!1,views:0,likes:0};return e.push(s),localStorage.setItem(this.nftsKey,JSON.stringify(e)),s}getNFTs(){return JSON.parse(localStorage.getItem(this.nftsKey)||"[]")}getNFT(t){return this.getNFTs().find(e=>e.id===t)}updateNFT(t,e){const s=this.getNFTs(),a=s.findIndex(e=>e.id===t);return-1!==a?(s[a]={...s[a],...e,lastUpdated:Date.now()},localStorage.setItem(this.nftsKey,JSON.stringify(s)),s[a]):null}getUserNFTs(t){return this.getNFTs().filter(e=>e.creator===t)}toggleNFTSale(t,e){const s=this.getNFT(t);if(s&&s.creator===e){const a=this.updateNFT(t,{forSale:!s.forSale});return this.addTransaction({type:s.forSale?"nft_listed":"nft_unlisted",walletAddress:e,nftId:t,timestamp:Date.now(),status:"completed"}),a}return null}addTransaction(t){const e=this.getTransactions(),s={id:Date.now().toString(),...t,timestamp:t.timestamp||Date.now()};return e.push(s),localStorage.setItem(this.transactionKey,JSON.stringify(e)),s}getTransactions(){return JSON.parse(localStorage.getItem(this.transactionKey)||"[]")}getUserTransactions(t){return this.getTransactions().filter(e=>e.walletAddress===t)}purchaseNFT(t,e){const s=this.getNFT(t);if(!s||!s.forSale||s.sold)return{success:!1,message:"NFT not available for purchase"};if(s.creator===e)return{success:!1,message:"Cannot purchase your own NFT"};const a=parseFloat(s.price),r=Number((.2*a).toFixed(6)),i=Number((.8*a).toFixed(6));if(Math.abs(r+i-a)>1e-6)return{success:!1,message:"Fee calculation error"};this.updateNFT(t,{owner:e,forSale:!1,sold:!0,soldAt:Date.now(),soldPrice:s.price,originalPrice:s.price}),this.addTransaction({type:"nft_purchase",walletAddress:e,nftId:t,amount:s.price,timestamp:Date.now(),status:"completed",description:`Purchased "${s.name}" for ${s.price} ETH`}),this.addTransaction({type:"nft_sale_earnings",walletAddress:s.creator,nftId:t,amount:i.toString(),timestamp:Date.now(),status:"completed",description:`Sale earnings for "${s.name}" (80% of ${s.price} ETH)`}),this.addTransaction({type:"platform_fee",walletAddress:"developer_wallet",nftId:t,amount:r.toString(),timestamp:Date.now(),status:"completed",description:`Platform fee for "${s.name}" (20% of ${s.price} ETH)`});const o=this.getArtist(s.creator);if(o){o.totalSales=(o.totalSales||0)+1,o.totalEarnings=(parseFloat(o.totalEarnings||"0")+i).toFixed(6);const t=this.getArtists(),e=t.findIndex(t=>t.walletAddress===s.creator);-1!==e&&(t[e]=o,localStorage.setItem(this.artistsKey,JSON.stringify(t)))}return{success:!0,message:"NFT purchased successfully",transaction:{nftPrice:a,developerFee:r,artistEarnings:i,breakdown:{total:a,artistReceives:i,platformFee:r,artistPercentage:"80%",platformPercentage:"20%"}}}}getStats(){const t=this.getNFTs(),e=this.getArtists(),s=this.getTransactions(),a=s.filter(t=>"nft_purchase"===t.type).reduce((t,e)=>t+parseFloat(e.amount),0);return{totalNFTs:t.length,totalArtists:e.length,totalTransactions:s.length,totalVolume:a.toFixed(2),activeListings:t.filter(t=>t.forSale&&!t.sold).length}}clearAllData(){localStorage.removeItem(this.storageKey),localStorage.removeItem(this.transactionKey),localStorage.removeItem(this.artistsKey),localStorage.removeItem(this.nftsKey),this.ensureStorageExists()}};
