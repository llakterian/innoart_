!function(){const e=document.createElement("link").relList;if(!(e&&e.supports&&e.supports("modulepreload"))){for(const e of document.querySelectorAll('link[rel="modulepreload"]'))t(e);new MutationObserver(e=>{for(const n of e)if("childList"===n.type)for(const e of n.addedNodes)"LINK"===e.tagName&&"modulepreload"===e.rel&&t(e)}).observe(document,{childList:!0,subtree:!0})}function t(e){if(e.ep)return;e.ep=!0;const t=function(e){const t={};return e.integrity&&(t.integrity=e.integrity),e.referrerPolicy&&(t.referrerPolicy=e.referrerPolicy),"use-credentials"===e.crossOrigin?t.credentials="include":"anonymous"===e.crossOrigin?t.credentials="omit":t.credentials="same-origin",t}(e);fetch(e.href,t)}}();window.config=new class{constructor(){this.networkId=11155111,this.networkName="sepolia",this.chainId=11155111,this.alchemyApiKey="rcicHE-JjgwQXK8SeyoRH3SOOkOLkZhx",this.alchemyUrl="https://eth-sepolia.g.alchemy.com/v2/rcicHE-JjgwQXK8SeyoRH3SOOkOLkZhx",this.contractAddress="0xca96FFD000Ce3d041C905d4d76d5781E35D75B3A",this.developerWallet="0xca96FFD000Ce3d041C905d4d76d5781E35D75B3A",this.ipfsApiKey="378ec52e.244f1311cc574f1d90b8210688e4e0e7",this.nftStorageApiKey="e55be093.0cbe7858183d4d21a74c4581fac99941",this.ipfsGateway="https://ipfs.io/ipfs/",this.ipfsGatewayBackup="https://gateway.pinata.cloud/ipfs/",this.platformFee=20,this.artistRoyalty=80,this.marketplaceName="InnoArt",this.walletConnectProjectId="77be79148051cada8506f6f586a028dd",this.nodeEnv="development",this.debug=!0,this.enableAnalytics=!1,this.sentryDsn="",this.networks={sepolia:{chainId:"0xaa36a7",name:"Sepolia Testnet",rpcUrl:this.alchemyUrl,blockExplorer:"https://sepolia.etherscan.io",nativeCurrency:{name:"SepoliaETH",symbol:"ETH",decimals:18}},mainnet:{chainId:"0x1",name:"Ethereum Mainnet",rpcUrl:"https://eth-mainnet.g.alchemy.com/v2/your_alchemy_key",blockExplorer:"https://etherscan.io",nativeCurrency:{name:"Ethereum",symbol:"ETH",decimals:18}}}}getCurrentNetwork(){return this.networks[this.networkName]}getPlatformFeeRate(){return this.platformFee/100}getArtistRoyaltyRate(){return this.artistRoyalty/100}getTransactionUrl(e){return`${this.getCurrentNetwork().blockExplorer}/tx/${e}`}getAddressUrl(e){return`${this.getCurrentNetwork().blockExplorer}/address/${e}`}getIpfsUrl(e){return`${this.ipfsGateway}${e}`}getIpfsBackupUrl(e){return`${this.ipfsGatewayBackup}${e}`}isValid(){return["contractAddress","developerWallet","alchemyApiKey","nftStorageApiKey"].every(e=>this[e]&&this[e].length>0)}getSummary(){return{network:this.networkName,chainId:this.chainId,contract:this.contractAddress,developer:this.developerWallet,platformFee:`${this.platformFee}%`,artistRoyalty:`${this.artistRoyalty}%`,marketplace:this.marketplaceName,environment:this.nodeEnv}}},window.config.debug&&console.log("InnArt Configuration:",window.config.getSummary());const e=new class{constructor(){this.state={isConnected:!1,isConnecting:!1,walletAddress:null,chainId:null},this.init()}async init(){console.log("Initializing wallet connection system..."),await this.checkExistingConnection(),this.setupEventListeners(),this.setupMetaMaskListeners(),this.updateUI(),console.log("Wallet connection system initialized")}async checkExistingConnection(){if(void 0!==window.ethereum)try{const e=await window.ethereum.request({method:"eth_accounts"});e.length>0&&(this.state.isConnected=!0,this.state.walletAddress=e[0],this.state.chainId=await window.ethereum.request({method:"eth_chainId"}),console.log("Existing wallet connection found:",e[0]))}catch(e){console.error("Error checking existing connection:",e)}}setupEventListeners(){document.addEventListener("click",e=>{const t=e.target;this.isWalletButton(t)&&(e.preventDefault(),e.stopPropagation(),this.toggleConnection())}),setInterval(()=>{this.updateUI()},3e3)}isWalletButton(e){return"connectWallet"===e.id||"connectWalletBtn"===e.id||e.classList.contains("connect-wallet-btn")||e.hasAttribute("data-wallet-connect")||e.onclick&&e.onclick.toString().includes("connectWallet")}setupMetaMaskListeners(){void 0!==window.ethereum&&(window.ethereum.on("accountsChanged",e=>{console.log("Accounts changed:",e),0===e.length?this.disconnect():(this.state.isConnected=!0,this.state.walletAddress=e[0],this.updateUI(),this.showMessage("Account switched successfully","success"))}),window.ethereum.on("chainChanged",e=>{console.log("Chain changed:",e),this.state.chainId=e,this.updateUI()}),window.ethereum.on("connect",e=>{console.log("MetaMask connected:",e)}),window.ethereum.on("disconnect",e=>{console.log("MetaMask disconnected:",e),this.disconnect()}))}async toggleConnection(){this.state.isConnected?this.disconnect():await this.connect()}async connect(){if(this.state.isConnecting)this.showMessage("Connection already in progress","info");else{this.state.isConnecting=!0,this.updateUI();try{if(void 0===window.ethereum)throw new Error("MetaMask not installed. Please install MetaMask to continue.");const t=await window.ethereum.request({method:"eth_requestAccounts"});if(0===t.length)throw new Error("No accounts found");const n=await window.ethereum.request({method:"eth_chainId"});this.state.isConnected=!0,this.state.walletAddress=t[0],this.state.chainId=n;try{const e=`Welcome to InnArt!\n\nSign this message to authenticate your wallet.\n\nTimestamp: ${(new Date).toISOString()}\nAddress: ${t[0]}`,n=await window.ethereum.request({method:"personal_sign",params:[e,t[0]]});sessionStorage.setItem("wallet_signature",n),sessionStorage.setItem("wallet_address",t[0]),sessionStorage.setItem("wallet_auth_timestamp",Date.now().toString()),this.showMessage("Wallet connected and authenticated successfully!","success")}catch(e){console.warn("Signature declined:",e),this.showMessage("Wallet connected (authentication signature declined)","warning")}this.updateUI(),window.dispatchEvent(new CustomEvent("walletConnected",{detail:{address:t[0],chainId:n}}))}catch(t){console.error("Connection error:",t);let e="Failed to connect wallet";4001===t.code?e="Connection rejected by user":-32002===t.code?e="Connection request pending in MetaMask":t.message.includes("not installed")&&(e="MetaMask not installed. Please install MetaMask extension."),this.showMessage(e,"error")}finally{this.state.isConnecting=!1,this.updateUI()}}}disconnect(){console.log("Disconnecting wallet..."),this.state.isConnected=!1,this.state.walletAddress=null,this.state.chainId=null,sessionStorage.removeItem("wallet_signature"),sessionStorage.removeItem("wallet_address"),sessionStorage.removeItem("wallet_auth_timestamp"),this.updateUI(),this.showMessage("Wallet disconnected","success"),window.dispatchEvent(new CustomEvent("walletDisconnected"))}updateUI(){this.getAllWalletButtons().forEach(e=>{if(e)try{if(e.classList.remove("btn-connected","btn-connecting"),this.state.isConnecting)e.textContent="Connecting...",e.disabled=!0,e.classList.add("btn-connecting"),e.title="Connecting to wallet...";else if(this.state.isConnected&&this.state.walletAddress){const t=this.formatAddress(this.state.walletAddress);e.textContent=t,e.disabled=!1,e.classList.add("btn-connected"),e.title=`Connected: ${this.state.walletAddress}\nClick to disconnect`}else e.textContent="Connect Wallet",e.disabled=!1,e.title="Click to connect your wallet"}catch(t){console.error("Error updating button:",t)}})}getAllWalletButtons(){const e=[];return["#connectWallet","#connectWalletBtn",".connect-wallet-btn","[data-wallet-connect]"].forEach(t=>{document.querySelectorAll(t).forEach(t=>e.push(t))}),e}formatAddress(e){return e?`${e.substring(0,6)}...${e.substring(e.length-4)}`:""}showMessage(e,t="info",n=5e3){console.log(`[${t.toUpperCase()}] ${e}`);document.querySelectorAll(".wallet-message").forEach(e=>e.remove());const s=document.createElement("div");s.className=`wallet-message wallet-message-${t}`,s.textContent=e,Object.assign(s.style,{position:"fixed",top:"20px",right:"20px",padding:"12px 20px",borderRadius:"8px",fontWeight:"500",zIndex:"10000",maxWidth:"350px",wordWrap:"break-word",boxShadow:"0 4px 20px rgba(0, 0, 0, 0.3)",transition:"opacity 0.3s ease-in-out",opacity:"0"});const o={success:{background:"#10b981",color:"white"},error:{background:"#ef4444",color:"white"},warning:{background:"#f59e0b",color:"white"},info:{background:"#3b82f6",color:"white"}};Object.assign(s.style,o[t]||o.info),document.body.appendChild(s),setTimeout(()=>{s.style.opacity="1"},100),setTimeout(()=>{s.style.opacity="0",setTimeout(()=>{s.parentNode&&s.remove()},300)},n)}getConnectionStatus(){return this.state.isConnected}getWalletAddress(){return this.state.walletAddress}getChainId(){return this.state.chainId}isConnecting(){return this.state.isConnecting}};window.walletConnection=e,window.connectWallet=()=>e.connect(),window.disconnectWallet=()=>e.disconnect();
